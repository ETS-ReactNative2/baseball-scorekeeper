{"version":3,"sources":["EditableText.js","PitchBox.js","PitchCount.js","BaseballField.js","Dropdown.js","PlayerName.js","PlayerNames.js","Position.js","Header.js","InningsGrid.js","App.js","index.js"],"names":["EditableText","props","componentDidUpdate","prevProps","prevState","editable","state","onChange","textValue","id","event","value","target","setState","toggleEditable","onEnter","keyCode","render","textTag","type","name","onBlur","onSubmit","onKeyUp","autoFocus","className","noValueClassName","onClick","Component","defaultProps","PitchBox","toggleReached","reached","updateCount","PitchCount","generatePitches","number","updateFunc","pitches","i","push","key","balls","updatePitch","newCount","newState","console","log","getCount","updateBalls","updateStrikes","filter","val","length","strikes","fill","BaseballField","componentDidMount","svgHeight","svgRef","clientHeight","getStats","baseClicked","e","bases","handleCountChange","count","handleResultChange","result","getBaseClass","stats","inning","initResult","JSON","parse","stringify","version","xmlns","viewBox","ref","div","transform","d","y","width","height","x","this","x1","y1","x2","y2","style","stroke","strokeWidth","points","Dropdown","options","handleChange","map","v","toString","PlayerName","since","stateProp","handleNameChange","handleInningChange","showInningSelection","Array","from","k","PlayerNames","players","handlePlayerUpdate","buildPlayerComponents","playerComponents","player","index","Position","results","handleResultUpdate","onUpdate","position","undefined","Header","InningsGrid","positions","defaultStats","onPositionUpdate","positionStats","localStorage","setItem","getItem","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5f21a535.chunk.js","sourcesContent":["import React, { Component} from 'react';\nimport './EditableText.css';\n\nexport class EditableText extends Component {\n\n    static defaultProps = {\n        noValueClassName: 'noValue'\n    }\n\n    constructor(props) {\n        super();\n        this.state = {\n            editable: false,\n            textValue: props.value ? props.value : ''\n        }\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if(prevState.editable && !this.state.editable) {\n            this.props.onChange(this.state.textValue, this.props.id);\n        }\n    }\n\n    onChange = (event) => {\n        const {value} = event.target;\n        this.setState({textValue: value});\n    }\n\n    toggleEditable = (event) => {\n        this.setState(prevState => ({ ...prevState, editable: !prevState.editable}));\n    }\n\n    onEnter = (event) => {\n        if(event.keyCode === 13) {\n            this.toggleEditable(event);\n        }\n    }\n\n    render = () => {\n        let textTag;\n        if(this.state.editable) {\n            textTag = <input type=\"text\" name=\"result\" \n                                         onBlur={this.toggleEditable} \n                                         value={this.state.textValue} \n                                         onChange={this.onChange} \n                                         onSubmit={this.toggleEditable}\n                                         onKeyUp={this.onEnter}\n                                         autoFocus></input>\n        } else {\n            textTag = <div className={`notEditable ${this.state.textValue === '' ? this.props.noValueClassName : ''}`}>\n                {this.state.textValue}\n            </div>;\n        }\n\n        return <div className='editableText' onClick={this.toggleEditable}>\n            <div className=\"stretch\">\n                {textTag}\n            </div>\n        </div>\n    }\n}","import React, { Component } from 'react';\nimport './PitchCount.css';\n\nexport class PitchBox extends Component {\n    static defaultProps = {\n        reached: false\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = { reached:  this.props.reached };\n    }\n    \n    toggleReached = (event) => {\n        const reached = !this.state.reached;\n        this.setState({ reached: reached });\n        this.props.updateCount(reached);\n    }\n\n    render = () => {\n        const className = `pitchBox ${this.state.reached ? 'reached' : ''}`\n        return <div className={className} onClick={this.toggleReached}></div>;\n    }\n}","import React, { Component } from 'react';\nimport { PitchBox } from './PitchBox';\nimport './PitchCount.css';\n\nexport class PitchCount extends Component {\n\n    static defaultProps = {\n        balls: 0,\n        strikes: 0\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            balls: [false, false, false].fill(true, 0, this.props.balls),\n            strikes: [false, false].fill(true, 0, this.props.strikes)\n        };\n    }\n\n    generatePitches = (number, updateFunc) => {\n        let pitches = [];\n        \n        for(let i = 0; i < number; i++) {\n            pitches.push(<PitchBox key={i} updateCount={updateFunc(i)} reached={this.state.balls[i]}/>);\n        }\n\n        return pitches;\n    }\n\n    updatePitch = (type, i) => (reached) => {\n        const newCount = this.state[type];\n        newCount[i] = reached;\n        const newState = {};\n        newState[type] = newCount;\n        this.setState(newState);\n        console.log(this.getCount());\n\n        //let parent know of change\n        if(this.props.onChange) {\n            this.props.onChange(this.getCount());\n        }\n    }\n\n    updateBalls = (i) => this.updatePitch('balls', i);\n\n    updateStrikes = (i) => this.updatePitch('strikes', i);\n\n    getCount = () => (\n        {  \n            balls: this.state.balls.filter(val => val).length,\n            strikes: this.state.strikes.filter(val => val).length\n        }\n    );\n\n    render = () => {\n        return <div className=\"pitchCount\">\n            <div className=\"balls flexbox\">\n                {this.generatePitches(3, this.updateBalls)}\n            </div>\n            <div className=\"strikes flexbox\">\n                {this.generatePitches(2, this.updateStrikes)}\n            </div>\n        </div>\n    }\n}","import React, { Component } from 'react';\nimport { EditableText } from './EditableText';\nimport { PitchCount } from './PitchCount';\nimport './BaseballField.css';\n\nexport class BaseballField extends Component {\n\n    static defaultProps = {\n        bases: [\n            {\n                name: 'first',\n                reached: false\n            }, \n            {\n                name: 'second',\n                reached: false\n            },\n            {\n                name: 'third',\n                reached: false\n            },\n            {\n                name: 'home',\n                reached: false\n            },\n        ],\n        result: {\n            count: {\n                balls: 0,\n                strikes: 0\n            }\n        }\n    }\n\n    constructor(props) {\n        super(props);\n\n        if(this.props.result) {\n            const initResult = this.props.result;\n            if(!initResult.bases) {\n                initResult.bases = JSON.parse(JSON.stringify(this.props.bases));\n            }\n\n            this.state = initResult;\n        } else {\n            this.state = { \n                bases: JSON.parse(JSON.stringify(this.props.bases)) //have to do this to create a copy of the default prop\n            };\n        }\n    }\n\n    componentDidMount = () => this.setState({svgHeight: this.svgRef.clientHeight});\n\n    componentDidUpdate = (prevProps, prevState) => this.props.onChange && this.props.onChange(this.getStats());\n\n    baseClicked = (e) => {\n        let bases = this.state.bases;\n        let i = e.target.id - 1;\n\n        if(bases[i].reached) {\n            for(; i < bases.length; i++) {\n                bases[i].reached = false;\n            }\n        } else {\n            for(; i >= 0; i--) {\n                bases[i].reached = true;\n            }\n        }\n        this.setState(bases);\n    }\n\n    handleCountChange = (count) => this.setState({count: count});\n\n    handleResultChange = (result) => this.setState({result: result});\n\n    getBaseClass = (reached) => reached ? 'base reached' : 'base';\n\n    getStats = () => {\n        const stats = {\n            inning: this.props.inning,\n            result: this.state.result\n        }\n\n        if(this.state.result && this.state.result !== '') {\n            stats.bases = this.state.bases;\n            stats.count = this.state.count;\n        } \n\n        return stats;\n    };\n    \n    render() {\n        return <div className=\"wrapper\">\n            <div className=\"field\">\n                <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" \n                                   viewBox=\"0 0 230 180\" \n                                   ref={(div) => this.svgRef = div}>\n                    <g className=\"infield\" transform=\"matrix(-0.7,-0.7,0.7,-0.7,115,180)\">\n                        <path d=\"M 0 0 L 160 0 A 160 140 45 0 1 0 160 L 0 0\" fill=\"sienna\"/>\n                        <g className=\"bases\">\n                            <rect y=\"0\" width=\"100px\" height=\"100px\" fill=\"green\" x=\"0\" />\n                            { this.state.bases[0].reached && \n                                <line x1=\"2\" y1=\"18\" x2=\"2\" y2=\"80\" style={{stroke:'yellow',strokeWidth:4}}/>\n                            }\n                            { this.state.bases[1].reached && \n                                <line x1=\"20\" y1=\"98\" x2=\"80\" y2=\"98\" style={{stroke:'yellow',strokeWidth:4}}/>\n                            }\n                            { this.state.bases[2].reached &&\n                                <line x1=\"98\" y1=\"18\" x2=\"98\" y2=\"80\" style={{stroke:'yellow',strokeWidth:4}}/>\n                            }\n                            { this.state.bases[3].reached &&\n                                <line x1=\"80\" y1=\"2\" x2=\"18\" y2=\"2\" style={{stroke:'yellow',strokeWidth:4}}/>\n                            }\n                            <rect id=\"1\" name={this.state.bases[0].name} className={this.getBaseClass(this.state.bases[0].reached)} x=\"0\" y=\"80\" width=\"20px\" height=\"20px\" fill=\"white\" onClick={this.baseClicked}/>\n                            <rect id=\"2\" name={this.state.bases[1].name} className={this.getBaseClass(this.state.bases[1].reached)} x=\"80\" y=\"80\" width=\"20px\" height=\"20px\" fill=\"white\" onClick={this.baseClicked}/>\n                            <rect id=\"3\" name={this.state.bases[2].name} className={this.getBaseClass(this.state.bases[2].reached)} x=\"80\" y=\"0\" width=\"20px\" height=\"20px\" fill=\"white\" onClick={this.baseClicked}/>\n                            <polygon id=\"4\" name={this.state.bases[3].name} className={this.getBaseClass(this.state.bases[3].reached)} points=\"0,0 18,0 26,8 8,26 0,18 0,0\" fill=\"white\" onClick={this.baseClicked}/>\n                        </g>\n                    </g>\n                </svg>\n                <div className=\"count\" style={{height: `${this.state.svgHeight}px`}}>\n                    <PitchCount onChange={this.handleCountChange} {...this.props.result.count}/>\n                </div>\n            </div>\n            <EditableText onChange={this.handleResultChange} noValueClassName=\"dotted-border-top\" value={this.props.result.result}/>\n        </div>;\n    }\n}","import React, { Component } from 'react'\n\nexport class Dropdown extends Component {\n    \n    state = { value: this.props.value ? this.props.value : this.props.options[0]}\n\n    handleChange = event => {\n        this.setState({value: event.target.value});\n\n        if(this.props.onChange) {\n            this.props.onChange(event.target.value);\n        }\n    }\n\n    render = () => (\n        <select value={this.state.value} onChange={this.handleChange}>\n            { this.props.options.map((v, i) => <option value={v} key={i.toString()}>{v}</option>) }\n        </select>\n    )\n}","import React, { Component } from 'react';\nimport { EditableText } from './EditableText';\nimport { Dropdown } from './Dropdown';\n\nexport class PlayerName extends Component {\n\n    static defaultProps = {\n        name: \"\",\n        since: 1\n    }\n\n    state = {\n        name: this.props.name,\n        since: this.props.since\n    }\n\n    componentDidUpdate = () => {\n        if(this.props.onChange) {\n            this.props.onChange(this.state);\n        }\n    }\n\n    handleChange = (stateProp) => (value) => this.setState({[stateProp]: value});\n    \n    handleNameChange = this.handleChange('name');\n    handleInningChange = this.handleChange('since');\n\n\n    render = () => (\n        <div className=\"player dotted-border-bottom\">\n            <EditableText value={this.props.name} onChange={this.handleNameChange} noValueClassName=\"\"/>\n            { this.props.showInningSelection && <Dropdown onChange={this.handleInningChange} options={Array.from({length: 9}, (v, k) => k+1)}/> }\n        </div>\n    )\n}","import React, { Component } from 'react';\nimport { PlayerName } from './PlayerName';\nimport './PlayerNames.css';\n\nexport class PlayerNames extends Component {\n    \n    state = { players: this.props.players ? this.props.players : [] }\n\n    handlePlayerUpdate = (textValue, id) => {\n        //only store and update if there is a value\n        if(textValue !== \"\" && (id === this.state.players.length || textValue !== this.state.players[id].name)) {\n            const players = [...this.state.players, { name: textValue, since: 0}]\n            this.setState({players: players});\n\n            if(this.props.onChange) {\n                this.props.onChange(players);\n            }\n        }\n    }\n\n    buildPlayerComponents = () => {\n        const playerComponents = this.state.players.map((player, index) => (\n            <PlayerName name={player.name} showInningSelection={index > 0} key={index.toString()}/>\n        ));\n\n        playerComponents.push(<PlayerName showInningSelection={this.state.players.length > 0} key={this.state.players.length.toString()}/>);\n\n        return playerComponents;\n    }\n\n    render = () => (\n        <div className=\"player-names\">\n            {this.buildPlayerComponents()}\n        </div>\n    )\n\n}","import React, { Component } from 'react';\nimport { BaseballField } from './BaseballField';\nimport './Position.css';\nimport { PlayerNames } from './PlayerNames';\n\nexport class Position extends Component {\n    \n    results = [];\n\n    constructor(props) {\n        super(props);\n\n        if(this.props.stats && this.props.stats.players) {\n            this.players = this.props.stats.players;\n        }\n    }\n\n    handleResultUpdate = (stats) => {\n        this.results[stats.inning - 1] = stats;\n        \n        if (this.props.onUpdate) {\n            this.props.onUpdate({ position: this.props.number, results: this.results, players: this.players });\n        }\n    }\n\n    handlePlayerUpdate = (players) => {\n        this.players = players;\n\n        if (this.props.onUpdate) {\n            this.props.onUpdate({ position: this.props.number, results: this.results, players: this.players });\n        }\n    }\n\n    render = () => {\n        let players = Array.from({length: 9}, (e, i) => (\n            <div key={`${this.props.number}-${i}`} className=\"inning\">\n                <BaseballField inning={i + 1} onChange={this.handleResultUpdate} result={this.props.stats ? this.props.stats.results[i] : undefined}/>\n            </div>\n        ));\n        \n        return <div className=\"position\">\n            <div className=\"players left-column\">\n                <PlayerNames onChange={this.handlePlayerUpdate} players={this.props.stats ? this.props.stats.players : undefined}/>\n            </div>\n            <div className=\"results\">\n                {players}\n            </div>\n        </div>\n    }\n}\n\n","import React, { Component } from 'react';\nimport './Header.css';\n\nexport class Header extends Component {\n    render = () => (\n        <div className=\"header\">\n            <div className=\"left-column\">\n                Players\n            </div>\n            { Array.from({length: 9}, (e, i) => <div key={i.toString()} className=\"inning inning-header\">{i + 1}</div>) }\n            <div className=\"end inning\"></div>\n        </div>\n    )\n}","import React, {Component} from 'react';\nimport { Position } from './Position.js';\nimport './InningsGrid.css';\nimport { Header } from './Header'; \n\nexport class InningsGrid extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.positionStats = [];\n\n        if(localStorage.getItem('game')) {\n            this.defaultStats = JSON.parse(localStorage.getItem('game'));\n            console.log(this.defaultStats);\n        }\n    }\n\n    render = () => {\n        let positions;\n\n        if(this.defaultStats) {\n            positions = this.defaultStats.map((position, i) => <Position number={i + 1} key={i} stats={position} onUpdate={this.onPositionUpdate}/>)\n        } else {\n            positions = Array.from({length: 9}, (e, i) => <Position number={i + 1} key={i} onUpdate={this.onPositionUpdate} />);\n        }\n\n\n\n        return <div className=\"inningsGrid\">\n            <Header/>\n            <div className=\"grid\">\n                {positions}\n            </div>\n        </div>;\n    }\n\n    onPositionUpdate = (results) => {\n        this.positionStats[results.position - 1] = results;\n        localStorage.setItem('game', JSON.stringify(this.positionStats));\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { BaseballField } from './BaseballField';\nimport { InningsGrid } from './InningsGrid';\n\nclass App extends Component {\n  //render = () => <BaseballField/>\n  render = () => <InningsGrid/>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}